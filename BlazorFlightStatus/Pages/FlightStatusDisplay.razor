@page "/flightstatusdisplay"
@using Microsoft.AspNetCore.SignalR.Client
@using FlightLibrary.Model
@implements IAsyncDisposable
@inject NavigationManager NavigationManager

<PageTitle>Flight Statuses</PageTitle>

<div class="title-box">✈️ Departure Flights</div>

@if (flights.Count == 0)
{
    <div class="no-data">
        <p><em>🚫 No flight data available at the moment.</em></p>
    </div>
}
else
{
    <table class="table table-hover table-bordered flight-table">
        <thead class="table-dark">
            <tr>
                <th>Id</th>
                <th>Flight</th>
                <th>Status</th>
                <th>From</th>
                <th>To</th>
                <th>Departure</th>
                <th>Arrival</th>
            </tr>
        </thead>
        <tbody>

                @for (int i = 0; i < flights.Count; i++)
                {
                    var flight = flights[i];
                <tr>
                    <td>@(i + 1)</td> 
                    <td>@flight.FlightNumber</td>
                    <td>
                        <span class="badge @GetStatusClass(flight.Status)">
                                @flight.Status
                        </span>
                    </td>
                    <td>@flight.Origin</td>
                    <td>@flight.Destination</td>
                    <td>@flight.DepartureDateTime.ToString("g")</td>
                    <td>@flight.ArrivalDateTime.ToString("g")</td>
                </tr>
                }
        </tbody>

    </table>
}

<div class="alert alert-info mt-3">
    🔄 SignalR Connection: <strong>@hubConnection?.State.ToString()</strong>
</div>

<style>
    .title-box {
        font-size: 2.2rem;
        font-weight: 700;
        color: white;
        background: linear-gradient(to right, #0d6efd, #6610f2);
        padding: 1rem;
        border-radius: 0.75rem;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
    }

    .flight-table td, .flight-table th {
        vertical-align: middle;
        text-align: center;
    }

    .no-data {
        text-align: center;
        padding: 2rem;
        font-size: 1.2rem;
        color: #ccc;
    }

    body {
        background-color: #161b22;
        color: #f0f6fc;
    }

    .badge {
        font-size: 1rem;
        padding: 0.5em 1.5em;
        border-radius: 2em;
        font-weight: 600;
        letter-spacing: 0.03em;
        box-shadow: 0 2px 8px rgba(40, 40, 40, 0.15);
        border: none;
        transition: box-shadow 0.2s, transform 0.2s;
        display: inline-block;
    }

    .badge-checkin {
        background: linear-gradient(90deg, #5eead4 0%, #2dd4bf 100%);
        color: #033a38;
        border: 1.5px solid #1de9b6;
    }

    .badge-boarding {
        background: linear-gradient(90deg, #ffe259 0%, #ffa751 100%);
        color: #443104;
        border: 1.5px solid #ffbb33;
    }

    .badge-departed {
        background: linear-gradient(90deg, #00c6fb 0%, #005bea 100%);
        color: #fff;
        border: 1.5px solid #00c6fb;
    }

    .badge-delayed {
        background: linear-gradient(90deg, #f85032 0%, #e73827 100%);
        color: #fff;
        border: 1.5px solid #e73827;
    }

    .badge-cancelled {
        background: linear-gradient(90deg, #757f9a 0%, #d7dde8 100%);
        color: #471818;
        border: 1.5px solid #757f9a;
        text-decoration: line-through;
    }

    .badge-secondary {
        background: linear-gradient(90deg, #a1c4fd 0%, #c2e9fb 100%);
        color: #0d153a;
        border: 1.5px solid #a1c4fd;
    }

    .badge:hover, .badge:focus {
        box-shadow: 0 4px 20px rgba(0,0,0,0.20), 0 1.5px 4px rgba(80,80,80,0.08);
        transform: scale(1.06);
        cursor: pointer;
    }
</style>

@code {
    private HubConnection? hubConnection;
    private List<FlightInfo> flights = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadFlightsAsync();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("http://localhost:5000/flightstatushub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, string>("ReceiveFlightStatus", (flight, status) =>
        {
            var existingFlight = flights.FirstOrDefault(f => f.FlightNumber == flight);
            if (existingFlight != null)
            {
                existingFlight.Status = status;
                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
    }

    private async Task LoadFlightsAsync()
    {
        try
        {
            var http = new HttpClient();
            var uri = NavigationManager.ToAbsoluteUri("http://localhost:5000/api/flightinfo");
            var response = await http.GetAsync(uri);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var data = System.Text.Json.JsonSerializer.Deserialize<List<FlightInfo>>(json, new System.Text.Json.JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                if (data != null)
                    flights = data;
            }
        }
        catch (Exception ex)
        {
            // Optionally: лог хийх эсвэл хэрэглэгчид мэдээлэх
        }
    }

    private string GetStatusClass(string status) => status.Trim().ToLower() switch
    {
        "registering" => "badge-checkin",
        "boarding" => "badge-boarding",
        "departed" => "badge-departed",
        "delayed" => "badge-delayed",
        "cancelled" => "badge-cancelled",
        _ => "badge-secondary"
    };

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}