
@page "/flightstatusdisplay"
@using Microsoft.AspNetCore.SignalR.Client
@using FlightLibrary.Model
@implements IAsyncDisposable
@inject NavigationManager NavigationManager

<PageTitle>Flight Statuses</PageTitle>

<div class="title-box">✈️ Departure Flights</div>

@if (flights.Count == 0)
{
    <div class="no-data">
        <p><em>🚫 No flight data available at the moment.</em></p>
    </div>
}
else
{
    <table class="table table-hover table-bordered flight-table">
        <thead class="table-dark">
            <tr>
                <th>Flight</th>
                <th>Status</th>
                <th>From</th>
                <th>To</th>
                <th>Departure</th>
                <th>Arrival</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var flight in flights)
            {
                <tr>
                    <td>@flight.FlightNumber</td>
                    <td>
                        <span class="badge @GetStatusClass(flight.Status)">
                            @flight.Status
                        </span>
                    </td>
                    <td>@flight.Origin</td>
                    <td>@flight.Destination</td>
                    <td>@flight.DepartureTime.ToString("g")</td>
                    <td>@flight.ArrivalTime.ToString("g")</td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="alert alert-info mt-3">
    🔄 SignalR Connection: <strong>@hubConnection?.State.ToString()</strong>
</div>

<style>
    .title-box {
        font-size: 2.2rem;
        font-weight: 700;
        color: white;
        background: linear-gradient(to right, #0d6efd, #6610f2);
        padding: 1rem;
        border-radius: 0.75rem;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
    }

    .flight-table td, .flight-table th {
        vertical-align: middle;
        text-align: center;
    }

    .no-data {
        text-align: center;
        padding: 2rem;
        font-size: 1.2rem;
        color: #ccc;
    }

    body {
        background-color: #121212;
        color: #f1f1f1;
    }

    .badge {
        font-size: 1rem;
        padding: 0.5em 1em;
        border-radius: 1rem;
    }

    .badge-ontime {
        background-color: #28a745;
    }

    .badge-delayed {
        background-color: #dc3545;
    }

    .badge-boarding {
        background-color: #ffc107;
        color: black;
    }

    .badge-cancelled {
        background-color: #6c757d;
    }
</style>

@code {
    private HubConnection? hubConnection;

    private List<FlightStatus> flights = new()
    {
        new FlightStatus
        {
            FlightNumber = "AA123",
            Status = "On Time",
            Origin = "JFK",
            Destination = "LAX",
            DepartureTime = DateTime.Now.AddHours(1),
            ArrivalTime = DateTime.Now.AddHours(6)
        },
        new FlightStatus
        {
            FlightNumber = "DL456",
            Status = "Delayed",
            Origin = "ATL",
            Destination = "ORD",
            DepartureTime = DateTime.Now.AddMinutes(30),
            ArrivalTime = DateTime.Now.AddHours(2)
        },
        new FlightStatus
        {
            FlightNumber = "UA789",
            Status = "Boarding",
            Origin = "SFO",
            Destination = "SEA",
            DepartureTime = DateTime.Now.AddMinutes(10),
            ArrivalTime = DateTime.Now.AddHours(2)
        }
    };

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("http://localhost:5000/flightstatushub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, string>("ReceiveFlightStatus", (flight, status) =>
        {
            var existingFlight = flights.FirstOrDefault(f => f.FlightNumber == flight);
            if (existingFlight != null)
            {
                existingFlight.Status = status;
                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
    }

    private string GetStatusClass(string status) => status.ToLower() switch
    {
        "on time" => "badge-ontime",
        "delayed" => "badge-delayed",
        "boarding" => "badge-boarding",
        "cancelled" => "badge-cancelled",
        _ => "badge-secondary"
    };

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}